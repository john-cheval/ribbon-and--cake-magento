diff --git a/node_modules/@graphcommerce/magento-cart-items/components/CartCrosssellsScroller/CartCrosssellsScroller.tsx b/node_modules/@graphcommerce/magento-cart-items/components/CartCrosssellsScroller/CartCrosssellsScroller.tsx
index 8ef7bb9..f46a92f 100644
--- a/node_modules/@graphcommerce/magento-cart-items/components/CartCrosssellsScroller/CartCrosssellsScroller.tsx
+++ b/node_modules/@graphcommerce/magento-cart-items/components/CartCrosssellsScroller/CartCrosssellsScroller.tsx
@@ -1,5 +1,5 @@
 import { useCrosssellItems } from '@graphcommerce/magento-cart/components/CartAdded/useCrosssellItems'
-import type { ProductListItemRenderer, ProductScrollerProps } from '@graphcommerce/magento-product'
+import type { ProductListItemRenderer, ProductScrollerProps,ProductListItemFragment } from '@graphcommerce/magento-product'
 import { AddProductsToCartForm, ProductScroller } from '@graphcommerce/magento-product'
 import { Trans } from '@lingui/macro'
 
@@ -18,7 +18,7 @@ export function CartCrosssellsScroller(props: CartItemCrosssellsProps) {
     <AddProductsToCartForm redirect={false} disableSuccessSnackbar>
       <ProductScroller
         productListRenderer={renderer}
-        items={crossSellItems}
+        items={crossSellItems as ProductListItemFragment[]}
         sx={sx}
         title={title ?? <Trans>Complete your purchase</Trans>}
         titleProps={{ variant: 'h6', ...titleProps }}
diff --git a/node_modules/@graphcommerce/magento-cart-items/components/CartItemActionCard/CartItemActionCard.tsx b/node_modules/@graphcommerce/magento-cart-items/components/CartItemActionCard/CartItemActionCard.tsx
index de7b68f..12bd53a 100644
--- a/node_modules/@graphcommerce/magento-cart-items/components/CartItemActionCard/CartItemActionCard.tsx
+++ b/node_modules/@graphcommerce/magento-cart-items/components/CartItemActionCard/CartItemActionCard.tsx
@@ -1,6 +1,6 @@
-import { Image } from '@graphcommerce/image'
+import { Image, StaticImport } from '@graphcommerce/image'
 import { useDisplayInclTax } from '@graphcommerce/magento-cart/hooks'
-import type { ProductLinkProps } from '@graphcommerce/magento-product'
+import { useFormAddProductsToCart, type ProductLinkProps } from '@graphcommerce/magento-product'
 import { Money } from '@graphcommerce/magento-store'
 import type { ActionCardProps } from '@graphcommerce/next-ui'
 import { ActionCard, actionCardImageSizes, filterNonNullableKeys } from '@graphcommerce/next-ui'
@@ -9,8 +9,15 @@ import { Box, Button, Link } from '@mui/material'
 import type { CartItemFragment } from '../../Api/CartItem.gql'
 import { RemoveItemFromCart } from '../RemoveItemFromCart/RemoveItemFromCart'
 import { UpdateItemQuantity } from '../UpdateItemQuantity/UpdateItemQuantity'
+import { CiEdit } from "react-icons/ci";
+import { useWatch } from 'react-hook-form'
+import { useEffect, useState } from 'react'
 
-export type CartItemActionCardProps = { cartItem: CartItemFragment; readOnly?: boolean } & Omit<
+
+export type iconPropsType = {
+  deleteIcon?: string | StaticImport | undefined
+}
+export type CartItemActionCardProps = { cartItem: CartItemFragment; readOnly?: boolean } & iconPropsType & Omit<
   ActionCardProps,
   'value' | 'image' | 'price' | 'title' | 'action'
 >
@@ -24,9 +31,15 @@ export function productEditLink(link: ProductLinkProps) {
 }
 
 export function CartItemActionCard(props: CartItemActionCardProps) {
-  const { cartItem, sx = [], size = 'responsive', readOnly = false, ...rest } = props
+  const { cartItem, sx = [], size = 'responsive', readOnly = false, deleteIcon, ...rest } = props
   const { uid, quantity, prices, errors, product } = cartItem
   const { name, thumbnail, url_key } = product
+  const [currentQuantity, setCurrentQuantity] = useState(quantity)
+  useEffect(() => {
+    setCurrentQuantity(quantity)
+  }, [quantity])
+
+  let unitPrice: number | null | undefined
 
   const inclTaxes = useDisplayInclTax()
 
@@ -34,25 +47,27 @@ export function CartItemActionCard(props: CartItemActionCardProps) {
 
   if (inclTaxes) {
     if (prices?.price_including_tax) {
-      price = prices.price_including_tax.value
+      unitPrice = prices.price_including_tax.value
     } else {
       const rowTotalIncludingTax = prices?.row_total_including_tax?.value ?? 0
-      price = rowTotalIncludingTax / quantity
+      unitPrice = rowTotalIncludingTax / quantity
     }
   } else {
-    price = prices?.price.value
+    unitPrice = prices?.price.value
   }
+  const totalPrice = (unitPrice || 0) * currentQuantity
 
   const hasOptions = !(
     (cartItem.__typename === 'SimpleCartItem' || cartItem.__typename === 'VirtualCartItem') &&
     cartItem.customizable_options.length === 0
   )
 
+
   return (
     <ActionCard
       value={uid}
       sx={[
-        (theme) => ({
+        (theme: any) => ({
           '&.ActionCard-root': {
             px: 0,
             py: theme.spacings.xs,
@@ -72,6 +87,7 @@ export function CartItemActionCard(props: CartItemActionCardProps) {
           },
           '& .ActionCard-action': {
             pr: readOnly ? 0 : theme.spacings.xs,
+            height: "100%"
           },
           '& .ActionCard-image': {
             alignSelf: 'flex-start',
@@ -85,6 +101,26 @@ export function CartItemActionCard(props: CartItemActionCardProps) {
             pr: readOnly ? 0 : theme.spacings.xs,
             mb: { xs: 0.5, sm: 0 },
           },
+          '& .ActionCard-details': {
+            display: "flex",
+            gap: 0.5,
+            ['& .MuiBox-root']: {
+              //display:"flex",
+              gap: 0.5,
+              ['&::after']: {
+                content: '","',
+                display: "contents",
+              },
+              ['&:last-child']: {
+                ['&::after']: {
+                  content: "unset"
+                },
+                ['&::before']: {
+                  content: "unset"
+                }
+              }
+            }
+          },
         }),
         ...(Array.isArray(sx) ? sx : [sx]),
       ]}
@@ -97,8 +133,9 @@ export function CartItemActionCard(props: CartItemActionCardProps) {
               width: actionCardImageSizes[size],
               height: actionCardImageSizes[size],
               display: 'block',
-              borderRadius: 1,
-              objectFit: 'contain',
+              borderRadius: '8px',
+              objectFit: 'cover',
+              marginRight: '10px'
             }}
             sizes={actionCardImageSizes[size]}
           />
@@ -131,32 +168,129 @@ export function CartItemActionCard(props: CartItemActionCardProps) {
               mt: 1,
               gap: '10px',
               justifyContent: 'start',
+              flexDirection: { xs: 'column', md: 'unset' }
             }}
           >
-            {readOnly ? quantity : <UpdateItemQuantity uid={uid} quantity={quantity} />}
-            {' ⨉ '}
+            {readOnly ? quantity : <UpdateItemQuantity sx={{
+              flexShrink: '0',
+              '& .MuiOutlinedInput-root': {
+                color: '#333',
+                borderRadius: '8px',
+                padding: '4px',
+              },
+              '& .MuiOutlinedInput-notchedOutline': {
+                borderColor: '#F6DBE0 ',
+              },
+              '&:hover .MuiOutlinedInput-notchedOutline': {
+                borderColor: '#F6DBE0 !important',
+              },
+              '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
+                borderColor: '#F6DBE0 !important',
+              },
+              '& .MuiButtonBase-root': {
+                color: '#333333',
+                fontsize: { xs: '15px', lg: '18px' },
+                fontWeight: 500
+              }, '& .MuiInputBase-input': {
+                color: '#333333',
+                fontWeight: '500',
+                fontsize: { xs: '15px', lg: '18px' }
 
-            <Money value={price} currency={prices?.price.currency} />
+              }, '& .MuiButtonBase-root svg': {
+                fontSize: { xs: '15px', md: '20px', xl: '24px' },
+              },
+
+            }} uid={uid} quantity={quantity} />}
+            {/*' ⨉ ' */}
+
+            {/* <Money sx={{color:'red'}} value={price} currency={prices?.price.currency} /> */}
+            <Box sx={{
+              ['& span']: {
+                fontSize: { xs: '16px', lg: '20px' },
+                lineHeight: "24px",
+                fontWeight: "700",
+                color: (theme: any) => theme.palette.custom.dark,
+                ['&:first-child']: {
+                  paddingRight: "6px"
+                }
+              }
+            }}>
+              <Money value={totalPrice} currency={prices?.price.currency} />
+            </Box>
           </Box>
-          {hasOptions && !readOnly && (
-            <Button
-              variant='inline'
-              color='secondary'
-              href={`${productEditLink(product)}?cartItemId=${uid}`}
-            >
-              <Trans id='Edit options' />
-            </Button>
-          )}
         </>
       }
-      price={<Money {...(inclTaxes ? prices?.row_total_including_tax : prices?.row_total)} />}
+
       action={
-        !readOnly && (
-          <RemoveItemFromCart
-            {...cartItem}
-            buttonProps={{ size: size === 'responsive' ? 'large' : size }}
-          />
-        )
+        <>
+          <Box sx={{
+            display: "flex",
+            flexDirection: "column",
+            alignItems: "center",
+            justifyContent: "space-between",
+            height: "100%"
+          }}>
+            <Box sx={{
+              display: "flex",
+              flexDirection: { xs: 'row', md: 'column' },
+              alignItems: { xs: 'center', md: 'flex-end' },
+              justifyContent: "center",
+              gap: '5px',
+              width: { xs: 'fit-content', md: '100%' }
+            }}>
+              {//hasOptions && !readOnly && (
+                <Button
+                  variant='inline'
+                  // color='secondary'
+                  sx={{
+                    color: '#9D9D9D',
+                    justifyContent: { xs: 'end', md: 'center' },
+
+                    '&:hover': {
+                      backgroundColor: 'transparent'
+                    },
+
+                    '&.MuiButtonBase-root svg': {
+                      marginBlock: { xs: 0, md: '15px 10px' },
+                    }
+                  }}
+                  href={`/p/${cartItem?.product?.url_key}`}
+                >
+                  <CiEdit size={"20px"} />
+                </Button>
+                //)
+              }
+
+              {
+                !readOnly && (
+                  <RemoveItemFromCart
+                    removeIcon={deleteIcon}
+                    sx={{
+                      marginLeft: 0, color: '#9D9D9D !important', stroke: '#9D9D9D !important'
+                    }}
+                    {...cartItem}
+                    buttonProps={{ size: size === 'responsive' ? 'large' : size }}
+                  />
+                )
+              }
+            </Box>
+
+            <Box sx={{
+              ['& span']: {
+                fontSize: { xs: '16px', lg: '20px' },
+                lineHeight: "24px",
+                fontWeight: "700",
+                color: (theme: any) => theme.palette.custom.dark,
+                ['&:first-child']: {
+                  paddingRight: "6px"
+                }
+              }
+            }}>
+              <Money value={totalPrice} currency={prices?.price.currency} />
+            </Box>
+          </Box>
+        </>
+
       }
       size={size}
       after={filterNonNullableKeys(errors).map((error) => (
diff --git a/node_modules/@graphcommerce/magento-cart-items/components/CartItemsActionCards/CartItemsActionCards.tsx b/node_modules/@graphcommerce/magento-cart-items/components/CartItemsActionCards/CartItemsActionCards.tsx
index 13d03bb..b4a1120 100644
--- a/node_modules/@graphcommerce/magento-cart-items/components/CartItemsActionCards/CartItemsActionCards.tsx
+++ b/node_modules/@graphcommerce/magento-cart-items/components/CartItemsActionCards/CartItemsActionCards.tsx
@@ -3,10 +3,12 @@ import { ActionCardLayout, nonNullable } from '@graphcommerce/next-ui'
 import type { CartItemsFragment } from '../../Api/CartItems.gql'
 import type { CartItemActionCardProps } from '../CartItemActionCard/CartItemActionCard'
 import { CartItemActionCard } from '../CartItemActionCard/CartItemActionCard'
+import { StaticImport } from '@graphcommerce/image'
 
 export type CartProps = Omit<ActionCardLayoutProps, 'className'> & {
   cart?: CartItemsFragment | null
   variant?: CartItemActionCardProps['variant']
+  removeIcon?:string | StaticImport
   itemProps?: Omit<
     CartItemActionCardProps,
     | 'cartItem'
@@ -28,17 +30,23 @@ export function CartItemsActionCards(props: CartProps) {
     layout = 'list',
     itemProps = {},
     variant = 'default',
+    removeIcon,
     ...remainingProps
   } = props
 
   if (!cart?.items?.length) return null
 
+  // console.log(cart?.items[0]?.product?.thumbnail,"this is the parent items thumbnail")
+
+
   return (
     <ActionCardLayout layout={layout} {...remainingProps}>
       {cart.items
         ?.filter(nonNullable)
         .map((item) => (
           <CartItemActionCard
+          sx={{borderBottom:'1px solid #c7cacd6b', borderRadius:'0 !important', paddingBlock:{xs:'10px', md:'20px', xl:'30px'}}}
+          deleteIcon={removeIcon}
             key={item.uid}
             cartItem={item}
             layout={layout}
diff --git a/node_modules/@graphcommerce/magento-cart-items/components/RemoveItemFromCart/RemoveItemFromCart.tsx b/node_modules/@graphcommerce/magento-cart-items/components/RemoveItemFromCart/RemoveItemFromCart.tsx
index 8647de3..78bed19 100644
--- a/node_modules/@graphcommerce/magento-cart-items/components/RemoveItemFromCart/RemoveItemFromCart.tsx
+++ b/node_modules/@graphcommerce/magento-cart-items/components/RemoveItemFromCart/RemoveItemFromCart.tsx
@@ -1,21 +1,23 @@
 import { ApolloCartErrorSnackbar } from '@graphcommerce/magento-cart'
 import type { ButtonProps } from '@graphcommerce/next-ui'
-import { Button } from '@graphcommerce/next-ui'
+import { Button, IconSvg } from '@graphcommerce/next-ui'
 import { Trans } from '@lingui/react'
 import type { SxProps, Theme } from '@mui/material'
 import { styled } from '@mui/material'
 import type { UseRemoveItemFromCartProps } from '../../hooks/useRemoveItemFromCart'
 import { useRemoveItemFromCart } from '../../hooks/useRemoveItemFromCart'
+import { StaticImport } from '@graphcommerce/image'
 
 export type RemoveItemFromCartProps = UseRemoveItemFromCartProps & {
   sx?: SxProps<Theme>
+  removeIcon?:string | StaticImport
   buttonProps?: Omit<ButtonProps, 'type' | 'loading'>
 }
 
 const Form = styled('form')({})
 
 export function RemoveItemFromCart(props: RemoveItemFromCartProps) {
-  const { uid, quantity, prices, buttonProps, ...formProps } = props
+  const { uid, quantity, prices, buttonProps,removeIcon, ...formProps } = props
 
   const { submit, formState, error } = useRemoveItemFromCart(props)
   return (
@@ -23,12 +25,28 @@ export function RemoveItemFromCart(props: RemoveItemFromCartProps) {
       <Button
         variant='inline'
         color='secondary'
-        {...buttonProps}
         size='medium'
+        disableRipple 
+         sx={{
+          marginLeft:'-12px',
+          width:'fit-content',
+          '&:hover':{
+            backgroundColor:'transparent !important',
+          },
+          
+        }}
+        {...buttonProps}
+
         type='submit'
         loading={formState.isSubmitting}
       >
-        <Trans id='Remove' />
+        {removeIcon && (
+<IconSvg src={removeIcon} sx={(theme) => ({
+              color:'#9D9D9D',
+              stroke:'#9d9d9d'
+            })} size='large' />
+        )}
+
       </Button>
       <ApolloCartErrorSnackbar error={error} />
     </Form>
diff --git a/node_modules/@graphcommerce/magento-cart-items/components/UpdateItemQuantity/UpdateItemQuantity.tsx b/node_modules/@graphcommerce/magento-cart-items/components/UpdateItemQuantity/UpdateItemQuantity.tsx
index f53eda0..d687879 100644
--- a/node_modules/@graphcommerce/magento-cart-items/components/UpdateItemQuantity/UpdateItemQuantity.tsx
+++ b/node_modules/@graphcommerce/magento-cart-items/components/UpdateItemQuantity/UpdateItemQuantity.tsx
@@ -36,6 +36,7 @@ export function UpdateItemQuantity(props: UpdateItemQuantityProps) {
 
   const submit = handleSubmit(() => {})
 
+
   return (
     <form noValidate onSubmit={submit}>
       <FormAutoSubmit control={control} submit={submit} leading />
@@ -43,7 +44,7 @@ export function UpdateItemQuantity(props: UpdateItemQuantityProps) {
         control={control}
         name='quantity'
         size='small'
-        variant='standard'
+        variant='outlined'
         inputProps={{ min: 1 }}
         InputProps={{ disableUnderline: true }}
         error={!!formState.errors.quantity}
diff --git a/node_modules/@graphcommerce/magento-cart-items/hooks/useRemoveItemFromCart.interceptor.ts b/node_modules/@graphcommerce/magento-cart-items/hooks/useRemoveItemFromCart.interceptor.ts
new file mode 100644
index 0000000..feceb93
--- /dev/null
+++ b/node_modules/@graphcommerce/magento-cart-items/hooks/useRemoveItemFromCart.interceptor.ts
@@ -0,0 +1,66 @@
+/* hash:475616464 */
+/* eslint-disable */
+/* This file is automatically generated for @graphcommerce/magento-cart-items/hooks/useRemoveItemFromCart */
+
+import { useRemoveItemFromCart as useRemoveItemFromCartGoogleDatalayerRemoveItemFromCart } from '@graphcommerce/google-datalayer/plugins/GoogleDatalayerRemoveItemFromCart'
+/** @see {@link file://./useRemoveItemFromCart.ts} for source of original */
+/** SOURCE_START */
+import { useFormGqlMutationCart } from '@graphcommerce/magento-cart/hooks'
+import type { UseFormGraphQlOptions } from '@graphcommerce/react-hook-form'
+import type { DistributedOmit } from 'type-fest'
+import type { CartItemFragment } from '../Api/CartItem.gql'
+import type {
+  RemoveItemFromCartMutation,
+  RemoveItemFromCartMutationVariables,
+} from '../components/RemoveItemFromCart/RemoveItemFromCart.gql'
+import { RemoveItemFromCartDocument } from '../components/RemoveItemFromCart/RemoveItemFromCart.gql'
+
+export type UseRemoveItemFromCartProps = DistributedOmit<CartItemFragment, '__typename'> &
+  Omit<
+    UseFormGraphQlOptions<RemoveItemFromCartMutation, RemoveItemFromCartMutationVariables>,
+    'errors'
+  >
+export function useRemoveItemFromCartOriginal(props: UseRemoveItemFromCartProps) {
+  const { uid, errors, ...options } = props
+  const form = useFormGqlMutationCart(RemoveItemFromCartDocument, {
+    defaultValues: {
+      uid,
+    },
+    ...options,
+  })
+  const { handleSubmit } = form
+  const submit = handleSubmit(() => {})
+  return {
+    ...form,
+    submit,
+  }
+}
+
+/** SOURCE_END */
+
+const logged: Set<string> = new Set()
+const logOnce = (log: string, ...additional: unknown[]) => {
+  if (logged.has(log)) return
+  logged.add(log)
+  console.warn(log, ...additional)
+}
+
+const useRemoveItemFromCartGoogleDatalayerRemoveItemFromCartInterceptor: typeof useRemoveItemFromCartOriginal =
+  (...args) => {
+    return useRemoveItemFromCartGoogleDatalayerRemoveItemFromCart(
+      useRemoveItemFromCartOriginal,
+      ...args,
+    )
+  }
+
+/**
+ * Here you see the 'interceptor' that is applying all the configured plugins.
+ *
+ * This file is NOT meant to be modified directly and is auto-generated if the plugins or the
+ * original source changes.
+ *
+ * @see {@link file://./useRemoveItemFromCart.ts} for original source file
+ * @see {useRemoveItemFromCartGoogleDatalayerRemoveItemFromCart} for source of applied plugin
+ */
+export const useRemoveItemFromCart =
+  useRemoveItemFromCartGoogleDatalayerRemoveItemFromCartInterceptor
