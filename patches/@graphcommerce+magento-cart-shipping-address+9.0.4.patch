diff --git a/node_modules/@graphcommerce/magento-cart-shipping-address/components/CustomerAddressForm/CustomerAddressForm.tsx b/node_modules/@graphcommerce/magento-cart-shipping-address/components/CustomerAddressForm/CustomerAddressForm.tsx
index 6f4add4..050dfe2 100644
--- a/node_modules/@graphcommerce/magento-cart-shipping-address/components/CustomerAddressForm/CustomerAddressForm.tsx
+++ b/node_modules/@graphcommerce/magento-cart-shipping-address/components/CustomerAddressForm/CustomerAddressForm.tsx
@@ -29,14 +29,16 @@ import type {
   SetCustomerShippingBillingAddressOnCartMutationVariables,
 } from './SetCustomerShippingBillingAddressOnCart.gql'
 import { SetCustomerShippingBillingAddressOnCartDocument } from './SetCustomerShippingBillingAddressOnCart.gql'
+import { ShippingMethodFormDocument } from '@graphcommerce/magento-cart-shipping-method'
 
 export type CustomerAddressListProps = Pick<UseFormComposeOptions, 'step'> & {
   children?: React.ReactNode
   sx?: SxProps<Theme>
+  isPickup?: boolean | undefined
 }
 
 export function CustomerAddressForm(props: CustomerAddressListProps) {
-  const { step, children, sx } = props
+  const { step, children, sx, isPickup = false } = props
 
   const customer = useQuery(CustomerDocument)
   const cartQuery = useCartQuery(GetAddressesDocument)
@@ -44,7 +46,6 @@ export function CustomerAddressForm(props: CustomerAddressListProps) {
   const isVirtual = cart?.is_virtual ?? false
 
   const customerAddresses = filterNonNullableKeys(customer.data?.customer?.addresses, ['id'])
-
   const cartShipping = cart?.shipping_addresses?.[0]
   const cartShippingId =
     findCustomerAddressFromCartAddress(customerAddresses, cartShipping)?.id || null
@@ -115,7 +116,7 @@ export function CustomerAddressForm(props: CustomerAddressListProps) {
     },
   })
 
-  const { handleSubmit, error, control, setValue, watch } = form
+  const { handleSubmit, error, control, setValue, watch, data } = form
   const formAddressId = watch('customer_address_id')
 
   useEffect(() => {
@@ -139,11 +140,71 @@ export function CustomerAddressForm(props: CustomerAddressListProps) {
     setValue,
   ])
 
-  const submit = handleSubmit(() => {})
+  const submit = handleSubmit(() => { })
 
   // We want to persist the form because we can't send the 'new address' state to the server, but we do want to keep this selection.
   useFormCompose({ form, step, submit, key: 'CustomerAddressForm' })
 
+  const method_form = useFormGqlMutationCart(ShippingMethodFormDocument, {
+    onBeforeSubmit: (variables: any) => {
+      const [carrier, method] = (variables?.carrierMethod ?? '').split('-')
+
+      if (carrier === "instore") {
+        return { ...variables, carrier, method: "pickup" }
+      }
+
+      if (carrier === "cityrate") {
+        return { ...variables, carrier, method: "cityrate" }
+      }
+
+      if (carrier === "flatrate") {
+        return { ...variables, carrier, method: "flatrate" }
+      }
+
+      return { ...variables, carrier, method }
+    }
+  })
+
+  const { handleSubmit: handleSubmitMethod, setValue: methodSetValue } = method_form
+  const methodSubmit = handleSubmitMethod(() => { })
+
+  const setShippingMethod = (code, method) => {
+    methodSetValue(code, method, { shouldValidate: true })
+    methodSubmit()
+  }
+
+  useEffect(() => {
+    if (data?.setShippingAddressesOnCart?.cart && form?.formState?.isSubmitSuccessful && !form?.formState?.isSubmitting && form?.formState?.isSubmitted) {
+      const shippingAddress = data?.setShippingAddressesOnCart?.cart?.shipping_addresses?.[0]
+      const availableMethods = (shippingAddress?.available_shipping_methods ?? [])
+
+      let selectedMethod
+
+      if (availableMethods?.length) {
+        if (isPickup) {
+          selectedMethod = availableMethods?.find(
+            (m: any) => (m?.carrier_code === 'instore' && m?.method_code === 'pickup') || (m?.carrier_code === "cityrate" && m?.method_code === "cityrate") || availableMethods?.[0],
+          )
+        } else {
+          const deliveryMethods = availableMethods?.filter(
+            (m: any) => !(m?.carrier_code === 'instore' && m?.method_code === 'pickup'),
+          )
+
+          if (deliveryMethods?.length) {
+            selectedMethod = deliveryMethods?.find(
+              (m: any) => m?.carrier_code === "cityrate" && m?.method_code === "cityrate",
+            ) || deliveryMethods?.[0]
+          }
+        }
+
+        if (selectedMethod) {
+          setShippingMethod("carrierMethod", selectedMethod?.carrier_code)
+        }
+      }
+    }
+  }, [isPickup, form?.formState?.isSubmitSuccessful, form?.formState?.isSubmitting, form?.formState?.isSubmitted])
+
+
   if (customer.loading || customerAddresses.length === 0) return <>{children}</>
 
   return (
diff --git a/node_modules/@graphcommerce/magento-cart-shipping-address/components/ShippingAddressForm/ShippingAddressForm.tsx b/node_modules/@graphcommerce/magento-cart-shipping-address/components/ShippingAddressForm/ShippingAddressForm.tsx
index a128fe9..a737672 100644
--- a/node_modules/@graphcommerce/magento-cart-shipping-address/components/ShippingAddressForm/ShippingAddressForm.tsx
+++ b/node_modules/@graphcommerce/magento-cart-shipping-address/components/ShippingAddressForm/ShippingAddressForm.tsx
@@ -1,6 +1,7 @@
 import type { UseFormComposeOptions } from '@graphcommerce/ecommerce-ui'
 import {
   CheckboxElement,
+  ComposedForm,
   FormAutoSubmit,
   FormPersist,
   TelephoneElement,
@@ -24,14 +25,21 @@ import {
 import { CountryRegionsDocument, StoreConfigDocument } from '@graphcommerce/magento-store'
 import { Form, FormRow } from '@graphcommerce/next-ui'
 import { Trans } from '@lingui/macro'
-import type { SxProps, Theme } from '@mui/material'
-import React from 'react'
+import { Box, Typography, type SxProps, type Theme } from '@mui/material'
+import React, { useEffect, useState } from 'react'
 import { isCartAddressACustomerAddress } from '../../utils/findCustomerAddressFromCartAddress'
 import { isSameAddress } from '../../utils/isSameAddress'
 import { GetAddressesDocument } from './GetAddresses.gql'
 import { SetBillingAddressDocument } from './SetBillingAddress.gql'
 import { SetShippingAddressDocument } from './SetShippingAddress.gql'
 import { SetShippingBillingAddressDocument } from './SetShippingBillingAddress.gql'
+import { EmailForm } from '@graphcommerce/magento-cart-email'
+import { ShippingMethodFormDocument } from '@graphcommerce/magento-cart-shipping-method'
+import PhoneInput from 'react-country-phone-input'
+import 'react-country-phone-input/lib/style.css'
+import { parsePhoneNumberFromString } from 'libphonenumber-js';
+
+
 
 export type ShippingAddressFormProps = Pick<UseFormComposeOptions, 'step'> & {
   /**
@@ -39,10 +47,15 @@ export type ShippingAddressFormProps = Pick<UseFormComposeOptions, 'step'> & {
    */
   ignoreCache?: boolean
   sx?: SxProps<Theme>
+  isPickup?: boolean | undefined
 }
 
 export const ShippingAddressForm = React.memo<ShippingAddressFormProps>((props) => {
-  const { step, sx } = props
+  const { step, sx, isPickup = false } = props
+
+  const [telephone, setTelephone] = useState<string>("")
+  // console.log(telephone, '==> this is telephone')
+
   const { data: cartQuery } = useCartQuery(GetAddressesDocument)
   const { data: config } = useQuery(StoreConfigDocument)
   const countryQuery = useQuery(CountryRegionsDocument, { fetchPolicy: 'cache-and-network' })
@@ -86,24 +99,24 @@ export const ShippingAddressForm = React.memo<ShippingAddressFormProps>((props)
     defaultValues: isCartAddressACustomerAddress(customerQuery?.customer?.addresses, currentAddress)
       ? { saveInAddressBook: true, isCompany: false }
       : {
-          // todo(paales): change to something more sustainable
-          firstname: currentAddress?.firstname ?? customerQuery?.customer?.firstname ?? '',
-          lastname: currentAddress?.lastname ?? customerQuery?.customer?.lastname ?? '',
-          telephone:
-            currentAddress?.telephone !== '000 - 000 0000' ? currentAddress?.telephone : '',
-          city: currentAddress?.city ?? '',
-          company: currentAddress?.company ?? '',
-          vatId: currentAddress?.vat_id ?? '',
-          postcode: currentAddress?.postcode ?? '',
-          street: currentAddress?.street?.[0] ?? '',
-          houseNumber: currentAddress?.street?.[1] ?? '',
-          addition: currentAddress?.street?.[2] ?? '',
-          regionId: currentAddress?.region?.region_id ?? null,
-          countryCode: currentAddress?.country.code ?? shopCountry, // todo: replace by the default shipping country of the store + geoip,
-          saveInAddressBook: true,
-          isCompany: Boolean(currentAddress?.company || currentAddress?.vat_id),
-          customerNote: '',
-        },
+        // todo(paales): change to something more sustainable
+        firstname: currentAddress?.firstname ?? customerQuery?.customer?.firstname ?? '',
+        lastname: currentAddress?.lastname ?? customerQuery?.customer?.lastname ?? '',
+        telephone:
+          currentAddress?.telephone !== '000 - 000 0000' ? currentAddress?.telephone : '',
+        city: currentAddress?.city ?? '',
+        company: currentAddress?.company ?? '',
+        vatId: currentAddress?.vat_id ?? '',
+        postcode: currentAddress?.postcode ?? '',
+        street: currentAddress?.street?.[0] ?? '',
+        houseNumber: currentAddress?.street?.[1] ?? '',
+        addition: currentAddress?.street?.[2] ?? '',
+        regionId: currentAddress?.region?.region_id ?? null,
+        countryCode: currentAddress?.country.code ?? shopCountry, // todo: replace by the default shipping country of the store + geoip,
+        saveInAddressBook: true,
+        isCompany: Boolean(currentAddress?.company || currentAddress?.vat_id),
+        customerNote: '',
+      },
     skipUnchanged: true,
     onBeforeSubmit: (variables) => {
       const regionId = countries
@@ -114,42 +127,218 @@ export const ShippingAddressForm = React.memo<ShippingAddressFormProps>((props)
         variables.company = ''
         variables.vatId = ''
       }
-
       return {
         ...variables,
-        telephone: variables.telephone || '000 - 000 0000',
+        telephone: variables.telephone,
+        postcode: '-',
         region: regionId ? variables.region : '',
         regionId,
         addition: variables.addition ?? '',
       }
     },
   })
-  const { handleSubmit, required, error } = form
-  const submit = handleSubmit(() => {})
+  const { handleSubmit, required, error, data } = form
+  const submit = handleSubmit(() => { })
 
   useFormCompose({ form, step, submit, key: 'ShippingAddressForm' })
 
+
+  const method_form = useFormGqlMutationCart(ShippingMethodFormDocument, {
+    onBeforeSubmit: (variables: any) => {
+      const [carrier, method] = (variables?.carrierMethod ?? '').split('-')
+
+      if (carrier === "instore") {
+        return { ...variables, carrier, method: "pickup" }
+      }
+
+      if (carrier === "cityrate") {
+        return { ...variables, carrier, method: "cityrate" }
+      }
+
+      if (carrier === "flatrate") {
+        return { ...variables, carrier, method: "flatrate" }
+      }
+
+      return { ...variables, carrier, method }
+    }
+  })
+
+  const { handleSubmit: handleSubmitMethod, setValue } = method_form
+  const methodSubmit = handleSubmitMethod(() => { })
+
+  const setShippingMethod = (code, method) => {
+    setValue(code, method, { shouldValidate: true })
+    methodSubmit()
+  }
+
+  useEffect(() => {
+    if (data?.setShippingAddressesOnCart?.cart && form?.formState?.isSubmitSuccessful && !form?.formState?.isSubmitting && form?.formState?.isSubmitted) {
+      const shippingAddress = data?.setShippingAddressesOnCart?.cart?.shipping_addresses?.[0]
+      const availableMethods = (shippingAddress?.available_shipping_methods ?? [])
+
+      let selectedMethod
+
+      if (availableMethods?.length) {
+        if (isPickup) {
+          selectedMethod = availableMethods?.find(
+            (m: any) => (m?.carrier_code === 'instore' && m?.method_code === 'pickup') || (m?.carrier_code === "cityrate" && m?.method_code === "cityrate") || availableMethods?.[0],
+          )
+        } else {
+          const deliveryMethods = availableMethods?.filter(
+            (m: any) => !(m?.carrier_code === 'instore' && m?.method_code === 'pickup'),
+          )
+
+          if (deliveryMethods?.length) {
+            selectedMethod = deliveryMethods?.find(
+              (m: any) => m?.carrier_code === "cityrate" && m?.method_code === "cityrate",
+            ) || deliveryMethods?.[0]
+          }
+        }
+
+        if (selectedMethod) {
+          setShippingMethod("carrierMethod", selectedMethod?.carrier_code)
+        }
+      }
+    }
+  }, [isPickup, form?.formState?.isSubmitSuccessful, form?.formState?.isSubmitting, form?.formState?.isSubmitted])
+
   return (
     <Form onSubmit={submit} noValidate sx={sx}>
       <FormAutoSubmit
         submit={submit}
         control={form.control}
-        name={['postcode', 'countryCode', 'regionId']}
+        name={['firstname', 'lastname', 'telephone', 'street', 'houseNumber', 'postcode', 'countryCode', 'regionId', 'city']}
       />
 
       <CompanyFields form={form} />
       <NameFields form={form} />
-      <AddressFields form={form} />
-
       <FormRow>
-        <TelephoneElement
-          control={form.control}
-          name='telephone'
-          variant='outlined'
-          required={required.telephone}
-          showValid
+        <EmailForm
+          step={1}
+          sx={{
+            '& .MuiInputLabel-formControl': {
+              color: (theme) => theme.palette.custom.main,
+              //    marginBottom:'clamp(10px, (9.14px + 0.27vw), 16px)',
+              fontSize: { xs: '15px', md: '16px' },
+              lineHeight: '158%',
+              fontWeight: 400,
+
+              '&.Mui-focused': {
+                color: (theme) => theme.palette.custom.main,
+              },
+              '& .MuiFormLabel-asterisk': {
+                display: 'none',
+              },
+            },
+
+            '& .MuiOutlinedInput-root': {
+              border: (theme) => `1px solid ${theme.palette.custom.border}`,
+              borderRadius: '4px',
+
+              '&:hover': {
+                border: (theme) => `1px solid ${theme.palette.custom.main}`,
+              },
+              '&.Mui-focused': {
+                border: (theme) => `1px solid ${theme.palette.custom.main}`,
+              },
+
+              '& .MuiOutlinedInput-notchedOutline': {
+                border: 'none',
+              },
+            },
+          }}
         />
+
+        <FormRow sx={{
+          paddingTop: 0,
+          paddingBottom: 0,
+          ['.react-tel-input']: {
+            ['input']: {
+              width: "100% !important",
+              height: "100% !important",
+              borderRadius: "4px !important",
+              border: '1px solid #F6DBE0 !important',
+              backgroundColor: "transparent !important",
+              ['&.invalid-number']: {
+                borderColor: '#f44336 !important'
+              }
+            },
+            ['.flag-dropdown']: {
+              border: '1px solid #F6DBE0 !important',
+              ['&.invalid-number']: {
+                borderColor: '#f44336 !important'
+              }
+            },
+            ['.selected-flag']: {
+              borderRadius: "4px 0px 0px 4px"
+            },
+            ['.special-label']: {
+              display: "unset !important",
+              left: "18px !important",
+              color: "#441e14",
+              fontSize: "12px",
+              lineHeight: '158%',
+              fontWeight: "400",
+              fontFamily: "'Bricolage Grotesque',sans-serif",
+              zIndex: 3
+            }
+          }
+        }}>
+          <PhoneInput
+            country={'ae'}
+            value={telephone}
+            onChange={phone => { setTelephone(phone) }}
+            isValid={(inputNumber, country: any, countries) => {
+              // console.log(`+${inputNumber}`?.length, country, country?.format?.replaceAll(" ", "")?.replaceAll("-", "")?.length);
+
+              const fullNumber = inputNumber.startsWith('+') ? inputNumber : `+${inputNumber}`;
+
+              const phoneNumber = parsePhoneNumberFromString(fullNumber, country.iso2);
+              if (!phoneNumber || !phoneNumber.isValid()) {
+                return false;
+              }
+
+              const digitsOnly = fullNumber.replace(/\D/g, '');
+              if (/^0+$/.test(digitsOnly)) return false;
+
+              form.setValue("telephone", fullNumber);
+              return true;
+            }}
+            inputProps={{
+              name: 'telephone',
+              required: true,
+              variant: 'outlined',
+              label: "phone"
+            }}
+            enableLongNumbers={true}
+            autoFormat={false}
+          />
+          {/* <TelephoneElement
+            control={form.control}
+            name='telephone'
+            variant='outlined'
+            required={required.telephone}
+            showValid
+          /> */}
+        </FormRow>
       </FormRow>
+
+      <Box>
+        <Typography sx={{
+          color: (theme) => theme.palette.custom.dark,
+          fontSize: { xs: '16px', md: '20px' },
+          marginTop: '15px',
+          marginBottom: { xs: '10px', md: '15px' },
+          textTransform: 'capitalize',
+          fontWeight: 400,
+          fontVariationSettings: '"wght" 400',
+        }}>Your Address</Typography>
+
+        <AddressFields form={form} />
+      </Box>
+
+
+
       {customerQuery?.customer && (
         <CheckboxElement
           control={form.control}
